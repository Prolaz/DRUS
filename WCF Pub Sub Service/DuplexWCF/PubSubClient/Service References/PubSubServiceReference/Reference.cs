//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PubSubClient.PubSubServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Measurement", Namespace="http://schemas.datacontract.org/2004/07/PubSubService")]
    [System.SerializableAttribute()]
    public partial class Measurement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationName {
            get {
                return this.LocationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationNameField, value) != true)) {
                    this.LocationNameField = value;
                    this.RaisePropertyChanged("LocationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StationID {
            get {
                return this.StationIDField;
            }
            set {
                if ((object.ReferenceEquals(this.StationIDField, value) != true)) {
                    this.StationIDField = value;
                    this.RaisePropertyChanged("StationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ListPublishSubscribe.Service", ConfigurationName="PubSubServiceReference.IPubSubService", CallbackContract=typeof(PubSubClient.PubSubServiceReference.IPubSubServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IPubSubService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/Subscribe", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/SubscribeResponse")]
        string Subscribe(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/Subscribe", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/SubscribeResponse")]
        System.Threading.Tasks.Task<string> SubscribeAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/Unsubscribe", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/UnsubscribeResponse")]
        string Unsubscribe(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/Unsubscribe", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/UnsubscribeResponse")]
        System.Threading.Tasks.Task<string> UnsubscribeAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/UnsubscribeAll", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/UnsubscribeAllResponse")]
        void UnsubscribeAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/UnsubscribeAll", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/UnsubscribeAllResponse")]
        System.Threading.Tasks.Task UnsubscribeAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/ListAllPublishers", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/ListAllPublishersResponse")]
        string[] ListAllPublishers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/ListAllPublishers", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/ListAllPublishersResponse")]
        System.Threading.Tasks.Task<string[]> ListAllPublishersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/ListMyPublishers", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/ListMyPublishersResponse")]
        string[] ListMyPublishers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/ListMyPublishers", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/ListMyPublishersResponse")]
        System.Threading.Tasks.Task<string[]> ListMyPublishersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/ListAllLocations", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/ListAllLocationsResponse")]
        string[] ListAllLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/ListAllLocations", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/ListAllLocationsResponse")]
        System.Threading.Tasks.Task<string[]> ListAllLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/PublisherInit", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/PublisherInitResponse")]
        string PublisherInit(string Ime, string Lokacija);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/PublisherInit", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/PublisherInitResponse")]
        System.Threading.Tasks.Task<string> PublisherInitAsync(string Ime, string Lokacija);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/ClientInit", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/ClientInitResponse")]
        void ClientInit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/ClientInit", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/ClientInitResponse")]
        System.Threading.Tasks.Task ClientInitAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/PublishValueChange", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/PublishValueChangeResponse")]
        void PublishValueChange(string Id, string Type, int Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/PublishValueChange", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/PublishValueChangeResponse")]
        System.Threading.Tasks.Task PublishValueChangeAsync(string Id, string Type, int Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/AllMeasurementsFromTo", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/AllMeasurementsFromToResponse")]
        PubSubClient.PubSubServiceReference.Measurement[] AllMeasurementsFromTo(string ID, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/AllMeasurementsFromTo", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/AllMeasurementsFromToResponse")]
        System.Threading.Tasks.Task<PubSubClient.PubSubServiceReference.Measurement[]> AllMeasurementsFromToAsync(string ID, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/CertainMeasurementFromTo", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/CertainMeasurementFromToRespon" +
            "se")]
        PubSubClient.PubSubServiceReference.Measurement[] CertainMeasurementFromTo(string ID, string Type, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/CertainMeasurementFromTo", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/CertainMeasurementFromToRespon" +
            "se")]
        System.Threading.Tasks.Task<PubSubClient.PubSubServiceReference.Measurement[]> CertainMeasurementFromToAsync(string ID, string Type, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/HighLowByID", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/HighLowByIDResponse")]
        System.DateTime[] HighLowByID(string ID, string Type, bool Hi, bool Lo, int Min, int Max);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/HighLowByID", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/HighLowByIDResponse")]
        System.Threading.Tasks.Task<System.DateTime[]> HighLowByIDAsync(string ID, string Type, bool Hi, bool Lo, int Min, int Max);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/Average", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/AverageResponse")]
        decimal Average(string Location, string Type, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/Average", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/AverageResponse")]
        System.Threading.Tasks.Task<decimal> AverageAsync(string Location, string Type, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/HighLowByLocation", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/HighLowByLocationResponse")]
        System.DateTime[] HighLowByLocation(string Location, string Type, bool Hi, bool Lo, int Min, int Max);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ListPublishSubscribe.Service/IPubSubService/HighLowByLocation", ReplyAction="http://ListPublishSubscribe.Service/IPubSubService/HighLowByLocationResponse")]
        System.Threading.Tasks.Task<System.DateTime[]> HighLowByLocationAsync(string Location, string Type, bool Hi, bool Lo, int Min, int Max);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPubSubServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://ListPublishSubscribe.Service/IPubSubService/ValueChange")]
        void ValueChange(string Id, string Type, int Value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPubSubServiceChannel : PubSubClient.PubSubServiceReference.IPubSubService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PubSubServiceClient : System.ServiceModel.DuplexClientBase<PubSubClient.PubSubServiceReference.IPubSubService>, PubSubClient.PubSubServiceReference.IPubSubService {
        
        public PubSubServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PubSubServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PubSubServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PubSubServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PubSubServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string Subscribe(string ID) {
            return base.Channel.Subscribe(ID);
        }
        
        public System.Threading.Tasks.Task<string> SubscribeAsync(string ID) {
            return base.Channel.SubscribeAsync(ID);
        }
        
        public string Unsubscribe(string ID) {
            return base.Channel.Unsubscribe(ID);
        }
        
        public System.Threading.Tasks.Task<string> UnsubscribeAsync(string ID) {
            return base.Channel.UnsubscribeAsync(ID);
        }
        
        public void UnsubscribeAll() {
            base.Channel.UnsubscribeAll();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAllAsync() {
            return base.Channel.UnsubscribeAllAsync();
        }
        
        public string[] ListAllPublishers() {
            return base.Channel.ListAllPublishers();
        }
        
        public System.Threading.Tasks.Task<string[]> ListAllPublishersAsync() {
            return base.Channel.ListAllPublishersAsync();
        }
        
        public string[] ListMyPublishers() {
            return base.Channel.ListMyPublishers();
        }
        
        public System.Threading.Tasks.Task<string[]> ListMyPublishersAsync() {
            return base.Channel.ListMyPublishersAsync();
        }
        
        public string[] ListAllLocations() {
            return base.Channel.ListAllLocations();
        }
        
        public System.Threading.Tasks.Task<string[]> ListAllLocationsAsync() {
            return base.Channel.ListAllLocationsAsync();
        }
        
        public string PublisherInit(string Ime, string Lokacija) {
            return base.Channel.PublisherInit(Ime, Lokacija);
        }
        
        public System.Threading.Tasks.Task<string> PublisherInitAsync(string Ime, string Lokacija) {
            return base.Channel.PublisherInitAsync(Ime, Lokacija);
        }
        
        public void ClientInit() {
            base.Channel.ClientInit();
        }
        
        public System.Threading.Tasks.Task ClientInitAsync() {
            return base.Channel.ClientInitAsync();
        }
        
        public void PublishValueChange(string Id, string Type, int Value) {
            base.Channel.PublishValueChange(Id, Type, Value);
        }
        
        public System.Threading.Tasks.Task PublishValueChangeAsync(string Id, string Type, int Value) {
            return base.Channel.PublishValueChangeAsync(Id, Type, Value);
        }
        
        public PubSubClient.PubSubServiceReference.Measurement[] AllMeasurementsFromTo(string ID, System.DateTime start, System.DateTime end) {
            return base.Channel.AllMeasurementsFromTo(ID, start, end);
        }
        
        public System.Threading.Tasks.Task<PubSubClient.PubSubServiceReference.Measurement[]> AllMeasurementsFromToAsync(string ID, System.DateTime start, System.DateTime end) {
            return base.Channel.AllMeasurementsFromToAsync(ID, start, end);
        }
        
        public PubSubClient.PubSubServiceReference.Measurement[] CertainMeasurementFromTo(string ID, string Type, System.DateTime start, System.DateTime end) {
            return base.Channel.CertainMeasurementFromTo(ID, Type, start, end);
        }
        
        public System.Threading.Tasks.Task<PubSubClient.PubSubServiceReference.Measurement[]> CertainMeasurementFromToAsync(string ID, string Type, System.DateTime start, System.DateTime end) {
            return base.Channel.CertainMeasurementFromToAsync(ID, Type, start, end);
        }
        
        public System.DateTime[] HighLowByID(string ID, string Type, bool Hi, bool Lo, int Min, int Max) {
            return base.Channel.HighLowByID(ID, Type, Hi, Lo, Min, Max);
        }
        
        public System.Threading.Tasks.Task<System.DateTime[]> HighLowByIDAsync(string ID, string Type, bool Hi, bool Lo, int Min, int Max) {
            return base.Channel.HighLowByIDAsync(ID, Type, Hi, Lo, Min, Max);
        }
        
        public decimal Average(string Location, string Type, System.DateTime start, System.DateTime end) {
            return base.Channel.Average(Location, Type, start, end);
        }
        
        public System.Threading.Tasks.Task<decimal> AverageAsync(string Location, string Type, System.DateTime start, System.DateTime end) {
            return base.Channel.AverageAsync(Location, Type, start, end);
        }
        
        public System.DateTime[] HighLowByLocation(string Location, string Type, bool Hi, bool Lo, int Min, int Max) {
            return base.Channel.HighLowByLocation(Location, Type, Hi, Lo, Min, Max);
        }
        
        public System.Threading.Tasks.Task<System.DateTime[]> HighLowByLocationAsync(string Location, string Type, bool Hi, bool Lo, int Min, int Max) {
            return base.Channel.HighLowByLocationAsync(Location, Type, Hi, Lo, Min, Max);
        }
    }
}
